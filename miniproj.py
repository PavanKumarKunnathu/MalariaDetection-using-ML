# -*- coding: utf-8 -*-
"""miniproj.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GaANuk2OPJurO5prHUohWiJPSS--usAB
"""



import os
import pandas as pd
import numpy as n
from sklearn.ensemble import RandomForestClassifier as rfc
from sklearn.model_selection import train_test_split as tsp
from flask import Flask, request, jsonify, render_template,url_for,redirect
import pickle
from sklearn.tree import DecisionTreeClassifier as dtf
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.linear_model  import LinearRegression as lnr
from sklearn.svm import SVC
import time
from sklearn import metrics
df=pd.read_csv('malariaDataset.csv.txt')
y=df.Label
x=df.drop('Label',axis=1)
x_tr,x_ts,y_tr,y_ts=tsp(x,y,test_size=0.3)
app = Flask(__name__)
@app.route('/')
def cancerhome():
    return render_template('homepage.html')
def decesiontree():
    clf = dtf()
    clf.fit(x_tr, y_tr)
    y_pred = clf.predict(x_ts)
@app.route('/predictmalaria',methods=['POST'])
def predictmalaria():
    a0=float(request.form['0'])
    a1=float(request.form['1'])
    a2 =float(request.form['2'])
    a3 =float(request.form['3'])
    a4 =float(request.form['4'])
    p=request.form['selection']
    l1=[[a0,a1,a2,a3,a4]]
    if (p =='dt'):
        lt1 = time.ctime()
        xx = ''
        s = ''
        for i in range(10, 19):
            s = s + lt1[i]
        clf = dtf()
        clf.fit(x_tr, y_tr)
        y_pred = clf.predict(x_ts)
        final_features = (n.array(l1))
        prediction = clf.predict(l1)
        accu = (metrics.accuracy_score(y_ts, y_pred))
        output = round(accu,3)
        lt2 = time.ctime()
        for i in range(10, 19):
            xx = xx + lt2[i]
        prediction = (",".join(prediction))
        if (prediction == 'Parasitized'):
            return render_template('a.html', alg='Decesion Tree', prediction_text=prediction,acc=output * 100,s=s, xx=xx)
        else:
            return render_template('b.html', alg='Decision Tree', prediction_text=prediction,acc=output * 100,s=s, xx=xx)



    elif(p == 'rf'):
            lt1 = time.ctime()
            xx = ''
            s = ''
            for i in range(10, 19):
                s = s + lt1[i]
            clf = rfc()
            clf.fit(x_tr, y_tr)
            y_pred = clf.predict(x_ts)
            final_features = (n.array(l1))
            prediction = clf.predict(final_features)
            accu = (metrics.accuracy_score(y_ts, y_pred))
            # int_features = [[float(x) for x in request.form.values()]]


            output = round(accu, 3)
            #return (str(output))
            lt2 = time.ctime()
            for i in range(10, 19):
                xx = xx + lt2[i]
            prediction = (",".join(prediction))
            if(prediction == 'Parasitized'):
                return render_template('a.html', alg='Random Forest', prediction_text=prediction, acc=output * 100,s=s, xx=xx)
            else:
                return render_template('b.html', alg='Random Forest', prediction_text=prediction, acc=output * 100, s=s,xx=xx)
    elif (p == 'logr'):
        lt1 = time.ctime()
        xx = ''
        s = ''
        for i in range(10, 19):
            s = s + lt1[i]
        clf =LogisticRegression()
        clf.fit(x_tr, y_tr)
        y_pred = clf.predict(x_ts)
        final_features = (n.array(l1))
        prediction = clf.predict(final_features)
        accu = (metrics.accuracy_score(y_ts, y_pred))
        output = round(accu, 3)
        lt2 = time.ctime()
        for i in range(10, 19):
            xx = xx + lt2[i]
        prediction = (",".join(prediction))
        print(prediction)

        if(prediction=='Parasitized'):
            return render_template('a.html', alg='Logistic Regression', prediction_text=prediction,acc=output * 100, s=s, xx=xx)
        else:
            return render_template('b.html', alg='Logistic Regression', prediction_text=prediction,acc=output * 100, s=s, xx=xx)



    elif (p == 'svm'):
        lt1 = time.ctime()
        xx = ''
        s = ''
        for i in range(10, 19):
            s = s + lt1[i]
        clf = SVC()
        clf.fit(x_tr, y_tr)
        y_pred = clf.predict(x_ts)
        final_features = (n.array(l1))
        prediction = clf.predict(final_features)
        accu = (metrics.accuracy_score(y_ts, y_pred))
        output = round(accu, 3)
        lt2 = time.ctime()
        for i in range(10, 19):
            xx = xx + lt2[i]
        prediction = (",".join(prediction))
        #return prediction
        if(prediction == 'Parasitized'):
            return render_template('a.html', alg='Support Vector Machine', prediction_text=prediction, acc=output * 100, s=s,xx=xx)
        else:
            return render_template('b.html', alg='Support Vector Machine', prediction_text=prediction, acc=output * 100, s=s,xx=xx)

    elif (p == 'gd'):
        lt1 = time.ctime()
        xx = ''
        s = ''
        for i in range(10, 19):
            s = s + lt1[i]
        clf= GradientBoostingClassifier(random_state=0)
        clf.fit(x_tr, y_tr)
        y_pred = clf.predict(x_ts)
        final_features = (n.array(l1))
        prediction = clf.predict(final_features)
        accu = (metrics.accuracy_score(y_ts, y_pred))
        output = round(accu, 3)

        lt2 = time.ctime()
        for i in range(10, 19):
            xx = xx + lt2[i]
        prediction = (",".join(prediction))
        #return prediction
        if (prediction == 'Parasitized'):
            return render_template('a.html', alg='GradientBoostingClassifier', prediction_text=prediction, acc=output * 100,s=s, xx=xx)
        else:
            return render_template('b.html', alg='GradientBoostingClassifier', prediction_text=prediction, acc=output * 100,s=s, xx=xx)




if __name__ == "__main__":
    app.run(debug=True)





'''


clf=rfc()
clf.fit(x_tr,y_tr)
y_pred=clf.predict(x_ts)
#y_pred
predct=clf.predict(n.array([[175.5,126,131,8902.5,0]]))
accuracy1=metrics.accuracy_score(y_ts,y_pred)
'''